package com.crosspay.payment.model;

import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.Date;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Null;

import org.json.JSONException;
import org.json.JSONObject;


@Entity
@Table(name = "SIGNUPS")
public class Register {

	// An autogenerated id (unique for each user in the db)
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int SIGNUPS_ID;

	@NotNull
	private String CUSTOMERNO;

	@NotNull
	private Date SIGNUPDATE;

	@NotNull
	private String CUSTOMEREMAIL;

	@NotNull
	private String CUSTOMERMOBILE;

	@Null
	private String SIGNUPCLIENT;

	@NotNull
	private String SIGNUPOTP;

	@NotNull
	private int RECORDSTATUS;

	@NotNull
	private String PASSWORD;

	// Public methods
	// Getter and setter methods

	public Register() {
	}

	public int getSIGNUPS_ID() {
		return SIGNUPS_ID;
	}

	public void setSIGNUPS_ID(int sIGNUPS_ID) {
		SIGNUPS_ID = sIGNUPS_ID;
	}

	public String getCUSTOMERNO() {
		return CUSTOMERNO;
	}

	public void setCUSTOMERNO(String cUSTOMERNO) {
		CUSTOMERNO = cUSTOMERNO;
	}

	public Date getSIGNUPDATE() {
		return SIGNUPDATE;
	}

	public void setSIGNUPDATE(Date sIGNUPDATE) {
		SIGNUPDATE = sIGNUPDATE;
	}

	public String getCUSTOMEREMAIL() {
		return CUSTOMEREMAIL;
	}

	public void setCUSTOMEREMAIL(String cUSTOMEREMAIL) {
		CUSTOMEREMAIL = cUSTOMEREMAIL;
	}

	public String getCUSTOMERMOBILE() {
		return CUSTOMERMOBILE;
	}

	public void setCUSTOMERMOBILE(String cUSTOMERMOBILE) {
		CUSTOMERMOBILE = cUSTOMERMOBILE;
	}

	public String getSIGNUPCLIENT() {
		return SIGNUPCLIENT;
	}

	public void setSIGNUPCLIENT(String sIGNUPCLIENT) {
		SIGNUPCLIENT = sIGNUPCLIENT;
	}

	public String getSIGNUPOTP() {
		return SIGNUPOTP;
	}

	public void setSIGNUPOTP(String sIGNUPOTP) {
		SIGNUPOTP = sIGNUPOTP;
	}

	public int getRECORDSTATUS() {
		return RECORDSTATUS;
	}

	public void setRECORDSTATUS(int rECORDSTATUS) {
		RECORDSTATUS = rECORDSTATUS;
	}

	public String getPASSWORD() {
		return PASSWORD;
	}

	public void setPASSWORD(String pASSWORD) {
		PASSWORD = pASSWORD;
	}

	public Register(int id) {
		 this.SIGNUPS_ID = id;
	}

	public Register(String firstname, String lastname, String email, String mobile, String countrycode,
			String dateofbirth, String gender, String password) throws InvalidKeyException, NoSuchAlgorithmException,
			InvalidKeySpecException, NoSuchPaddingException, InvalidAlgorithmParameterException,
			UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException {
		// System.out.println(firstname+lastname+email+mobile+countrycode+dateofbirth+gender+password);
		// System.out.println("id auto "+this.id);
		// this.id = 1;
		/*
		 * this.email = email; this.firstname = firstname; this.lastname = lastname;
		 * this.mobile = mobile; this.countrycode = countrycode; this.dateofbirth =
		 * dateofbirth; this.gender = gender; CryptoUtil ct = new CryptoUtil();
		 * this.password = ct.encrypt("crosspaywithencryption", password);
		 */
	}

	public JSONObject result(Register reg) throws JSONException {
		JSONObject resultjson = new JSONObject();
		resultjson.put("status", "200");
		resultjson.put("message", "Success");
		return resultjson;
	}

}